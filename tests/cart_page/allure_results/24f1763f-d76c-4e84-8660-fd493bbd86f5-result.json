{"name": "Изменение количества пиццы в корзине", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x5ed009c8c2ca <unknown>\n#1 0x5ed009733550 <unknown>\n#2 0x5ed0097850f0 <unknown>\n#3 0x5ed0097852e1 <unknown>\n#4 0x5ed0097d35e4 <unknown>\n#5 0x5ed0097aabed <unknown>\n#6 0x5ed0097d09e6 <unknown>\n#7 0x5ed0097aa993 <unknown>\n#8 0x5ed009776d6b <unknown>\n#9 0x5ed009778141 <unknown>\n#10 0x5ed009c512ab <unknown>\n#11 0x5ed009c550b9 <unknown>\n#12 0x5ed009c38139 <unknown>\n#13 0x5ed009c55c68 <unknown>\n#14 0x5ed009c1c60f <unknown>\n#15 0x5ed009c7a1f8 <unknown>\n#16 0x5ed009c7a3d6 <unknown>\n#17 0x5ed009c8b5e6 <unknown>\n#18 0x7a4078709aa4 <unknown>\n#19 0x7a4078796a34 __clone", "trace": "browser = <selenium.webdriver.remote.webdriver.WebDriver (session=\"04f2062d40bb5b15701db376857940e0\")>\n\n    @allure.title(\"Изменение количества пиццы в корзине\")\n    def test_change_pizza_quantity_in_cart(browser):\n        logging.info(\"Start test_change_pizza_quantity_in_cart\")\n    \n        open_main_page(browser)\n        add_pizza_to_cart(browser, \"425\")\n        open_cart_page(browser)\n        #qty_input = browser.find_element(By.ID, \"quantity_68a5c1e817012\")\n        qty_input = browser.find_element(By.XPATH, \"//input[contains(@class, 'input-text qty text')]\")\n        current_value = qty_input.get_attribute(\"value\")\n        print(\"Текущее количество:\", current_value)\n>       input_text(browser, (By.ID, \"quantity_68a5c1e817012\"), \"2\", \"Ввести число в поле количества\")\n\ntest_change_pizza_quantity_in_cart.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\src\\utils\\web_helpers\\browser_actions.py:28: in input_text\n    el = WebDriverWait(browser, 30).until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"04f2062d40bb5b15701db376857940e0\")>\nmethod = <function visibility_of_element_located.<locals>._predicate at 0x0000014CEDE87420>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       #0 0x5ed009c8c2ca <unknown>\nE       #1 0x5ed009733550 <unknown>\nE       #2 0x5ed0097850f0 <unknown>\nE       #3 0x5ed0097852e1 <unknown>\nE       #4 0x5ed0097d35e4 <unknown>\nE       #5 0x5ed0097aabed <unknown>\nE       #6 0x5ed0097d09e6 <unknown>\nE       #7 0x5ed0097aa993 <unknown>\nE       #8 0x5ed009776d6b <unknown>\nE       #9 0x5ed009778141 <unknown>\nE       #10 0x5ed009c512ab <unknown>\nE       #11 0x5ed009c550b9 <unknown>\nE       #12 0x5ed009c38139 <unknown>\nE       #13 0x5ed009c55c68 <unknown>\nE       #14 0x5ed009c1c60f <unknown>\nE       #15 0x5ed009c7a1f8 <unknown>\nE       #16 0x5ed009c7a3d6 <unknown>\nE       #17 0x5ed009c8b5e6 <unknown>\nE       #18 0x7a4078709aa4 <unknown>\nE       #19 0x7a4078796a34 __clone\n\n..\\..\\.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:138: TimeoutException"}, "steps": [{"name": "Открыть главную страницу сайта Pizzeria", "status": "passed", "start": 1755701297531, "stop": 1755701307555}, {"name": "Навести курсор на пиццу с ID 425", "status": "passed", "start": 1755701307555, "stop": 1755701308451}, {"name": "Нажать на кнопку «В корзину» для ID 425", "status": "passed", "start": 1755701308451, "stop": 1755701309076}, {"name": "Открыть страницу корзины", "status": "passed", "start": 1755701309077, "stop": 1755701311033}, {"name": "Ввести число в поле количества", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x5ed009c8c2ca <unknown>\n#1 0x5ed009733550 <unknown>\n#2 0x5ed0097850f0 <unknown>\n#3 0x5ed0097852e1 <unknown>\n#4 0x5ed0097d35e4 <unknown>\n#5 0x5ed0097aabed <unknown>\n#6 0x5ed0097d09e6 <unknown>\n#7 0x5ed0097aa993 <unknown>\n#8 0x5ed009776d6b <unknown>\n#9 0x5ed009778141 <unknown>\n#10 0x5ed009c512ab <unknown>\n#11 0x5ed009c550b9 <unknown>\n#12 0x5ed009c38139 <unknown>\n#13 0x5ed009c55c68 <unknown>\n#14 0x5ed009c1c60f <unknown>\n#15 0x5ed009c7a1f8 <unknown>\n#16 0x5ed009c7a3d6 <unknown>\n#17 0x5ed009c8b5e6 <unknown>\n#18 0x7a4078709aa4 <unknown>\n#19 0x7a4078796a34 __clone\n\n", "trace": "  File \"C:\\Users\\Admin\\PycharmProjects\\PythonProject\\src\\utils\\web_helpers\\browser_actions.py\", line 28, in input_text\n    el = WebDriverWait(browser, 30).until(\n        EC.visibility_of_element_located(locator)\n    )\n  File \"C:\\Users\\Admin\\PycharmProjects\\PythonProject\\.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py\", line 138, in until\n    raise TimeoutException(message, screen, stacktrace)\n"}, "start": 1755701311139, "stop": 1755701341477}], "attachments": [{"name": "log", "source": "fd04a9c4-f473-48c7-9e87-a0cbe968c426-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "f5fd2727-c63b-4340-9d66-365e6331ba8f-attachment.txt", "type": "text/plain"}], "start": 1755701297530, "stop": 1755701341501, "uuid": "56f1a2d1-97cb-4599-8bb7-6a4e9391da39", "historyId": "0f2a2edd0c7df1afe27109682aeaee1c", "testCaseId": "0f2a2edd0c7df1afe27109682aeaee1c", "fullName": "tests.cart_page.test_change_pizza_quantity_in_cart#test_change_pizza_quantity_in_cart", "labels": [{"name": "parentSuite", "value": "tests.cart_page"}, {"name": "suite", "value": "test_change_pizza_quantity_in_cart"}, {"name": "host", "value": "DESKTOP-2SK90NU"}, {"name": "thread", "value": "13844-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.cart_page.test_change_pizza_quantity_in_cart"}], "titlePath": ["tests", "cart_page", "test_change_pizza_quantity_in_cart.py"]}