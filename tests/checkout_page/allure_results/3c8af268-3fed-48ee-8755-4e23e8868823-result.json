{"name": "Попытка оформить заказ при вводе невалидных данных", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x5d983de682ca <unknown>\n#1 0x5d983d90f550 <unknown>\n#2 0x5d983d9610f0 <unknown>\n#3 0x5d983d9612e1 <unknown>\n#4 0x5d983d9af5e4 <unknown>\n#5 0x5d983d986bed <unknown>\n#6 0x5d983d9ac9e6 <unknown>\n#7 0x5d983d986993 <unknown>\n#8 0x5d983d952d6b <unknown>\n#9 0x5d983d954141 <unknown>\n#10 0x5d983de2d2ab <unknown>\n#11 0x5d983de310b9 <unknown>\n#12 0x5d983de14139 <unknown>\n#13 0x5d983de31c68 <unknown>\n#14 0x5d983ddf860f <unknown>\n#15 0x5d983de561f8 <unknown>\n#16 0x5d983de563d6 <unknown>\n#17 0x5d983de675e6 <unknown>\n#18 0x729aa53c8aa4 <unknown>\n#19 0x729aa5455a34 __clone", "trace": "browser = <selenium.webdriver.remote.webdriver.WebDriver (session=\"f4c4e8fa7db326a7c90b4d7193462e53\")>\n\n    @allure.title(\"Попытка оформить заказ при вводе невалидных данных\")\n    def test_place_order_with_invalid_data(browser):\n        logging.info(\"Start test_place_order_with_invalid_data\")\n    \n        open_main_page(browser)\n        add_pizza_to_cart(browser, \"425\")\n        open_account_page(browser)\n        fill_auth_form(browser, \"rick deckard\", \"1234\")\n        click_element(browser, (By.XPATH, \"//button[contains(@name, 'login')]\"), \"Нажать на кнопку «Войти»\")\n        open_checkout_page(browser)\n>       fill_checkout(browser, \"##@#112\", \"##@#112\", \"@#@!\", \"@#@!\", \"@#@!\", \"123\", \"телефон\")\n\ntest_place_order_with_invalid_data.py:20: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\src\\actions\\checkout.py:100: in fill_checkout\n    input_text(browser, (By.XPATH, \"//input[contains(@id, 'billing_first_name')]\"), name, \"Ввести имя пользователя\")\n..\\..\\src\\utils\\web_helpers\\browser_actions.py:28: in input_text\n    el = WebDriverWait(browser, 30).until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"f4c4e8fa7db326a7c90b4d7193462e53\")>\nmethod = <function visibility_of_element_located.<locals>._predicate at 0x0000016111F03380>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       #0 0x5d983de682ca <unknown>\nE       #1 0x5d983d90f550 <unknown>\nE       #2 0x5d983d9610f0 <unknown>\nE       #3 0x5d983d9612e1 <unknown>\nE       #4 0x5d983d9af5e4 <unknown>\nE       #5 0x5d983d986bed <unknown>\nE       #6 0x5d983d9ac9e6 <unknown>\nE       #7 0x5d983d986993 <unknown>\nE       #8 0x5d983d952d6b <unknown>\nE       #9 0x5d983d954141 <unknown>\nE       #10 0x5d983de2d2ab <unknown>\nE       #11 0x5d983de310b9 <unknown>\nE       #12 0x5d983de14139 <unknown>\nE       #13 0x5d983de31c68 <unknown>\nE       #14 0x5d983ddf860f <unknown>\nE       #15 0x5d983de561f8 <unknown>\nE       #16 0x5d983de563d6 <unknown>\nE       #17 0x5d983de675e6 <unknown>\nE       #18 0x729aa53c8aa4 <unknown>\nE       #19 0x729aa5455a34 __clone\n\n..\\..\\.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:138: TimeoutException"}, "steps": [{"name": "Открыть главную страницу сайта Pizzeria", "status": "passed", "start": 1757612639970, "stop": 1757612643382}, {"name": "Навести курсор на пиццу с ID 425", "status": "passed", "start": 1757612643382, "stop": 1757612644357}, {"name": "Нажать на кнопку «В корзину» для пиццы с ID 425", "status": "passed", "start": 1757612644357, "stop": 1757612644446}, {"name": "Открыть страницу аккаунта", "status": "passed", "start": 1757612644447, "stop": 1757612645164}, {"name": "Ввести имя пользователя", "status": "passed", "start": 1757612645164, "stop": 1757612645270}, {"name": "Ввести пароль", "status": "passed", "start": 1757612645270, "stop": 1757612645373}, {"name": "Нажать на кнопку «Войти»", "status": "passed", "start": 1757612645373, "stop": 1757612645463}, {"name": "Открыть страницу оформления заказа", "status": "passed", "start": 1757612645463, "stop": 1757612646371}, {"name": "Ввести имя пользователя", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x5d983de682ca <unknown>\n#1 0x5d983d90f550 <unknown>\n#2 0x5d983d9610f0 <unknown>\n#3 0x5d983d9612e1 <unknown>\n#4 0x5d983d9af5e4 <unknown>\n#5 0x5d983d986bed <unknown>\n#6 0x5d983d9ac9e6 <unknown>\n#7 0x5d983d986993 <unknown>\n#8 0x5d983d952d6b <unknown>\n#9 0x5d983d954141 <unknown>\n#10 0x5d983de2d2ab <unknown>\n#11 0x5d983de310b9 <unknown>\n#12 0x5d983de14139 <unknown>\n#13 0x5d983de31c68 <unknown>\n#14 0x5d983ddf860f <unknown>\n#15 0x5d983de561f8 <unknown>\n#16 0x5d983de563d6 <unknown>\n#17 0x5d983de675e6 <unknown>\n#18 0x729aa53c8aa4 <unknown>\n#19 0x729aa5455a34 __clone\n\n", "trace": "  File \"C:\\Users\\Admin\\PycharmProjects\\PythonProject\\src\\utils\\web_helpers\\browser_actions.py\", line 28, in input_text\n    el = WebDriverWait(browser, 30).until(\n        EC.visibility_of_element_located(locator)\n    )\n  File \"C:\\Users\\Admin\\PycharmProjects\\PythonProject\\.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py\", line 138, in until\n    raise TimeoutException(message, screen, stacktrace)\n"}, "start": 1757612646371, "stop": 1757612676526}], "attachments": [{"name": "log", "source": "e96a13f8-f8d4-4c1e-b023-5cd9cebca84b-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "a471d01c-3d92-4c8a-87df-aa31ab02aa95-attachment.txt", "type": "text/plain"}], "start": 1757612639969, "stop": 1757612676526, "uuid": "fd90e81b-00b4-48a3-971b-aa8401008623", "historyId": "5e4c4639e11fe72acf587d8777602b14", "testCaseId": "5e4c4639e11fe72acf587d8777602b14", "fullName": "tests.checkout_page.test_place_order_with_invalid_data#test_place_order_with_invalid_data", "labels": [{"name": "parentSuite", "value": "tests.checkout_page"}, {"name": "suite", "value": "test_place_order_with_invalid_data"}, {"name": "host", "value": "DESKTOP-2SK90NU"}, {"name": "thread", "value": "7040-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.checkout_page.test_place_order_with_invalid_data"}], "titlePath": ["tests", "checkout_page", "test_place_order_with_invalid_data.py"]}